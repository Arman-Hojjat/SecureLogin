/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hojjatarmansecurelogin;

import java.io.FileNotFoundException; // handle file not found
import java.io.EOFException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author arman hojjatoleslami
 * The purpose of this program is to create a safe login page that is easy to use and allows for basic actions to be done
 */
public class SecureLoginJFrame extends javax.swing.JFrame {

    /**
     * Creates new form SecureLoginJFrame
     *
     * @throws java.io.FileNotFoundException
     * @throws java.io.EOFException
     * @throws java.lang.ClassNotFoundException
     */
    public SecureLoginJFrame() throws FileNotFoundException, IOException, ClassNotFoundException, EOFException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        passwordBox = new javax.swing.JTextField();
        jButtonLogin = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        setUser = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        setEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        setPass = new javax.swing.JTextField();
        jButtonRegister = new javax.swing.JButton();
        registerMessage = new javax.swing.JLabel();
        loginMessage = new javax.swing.JLabel();
        forgotPassword = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Sandbag Corporation - We have sand since 2021!");

        jLabel2.setText("Username:");

        usernameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Password:");

        passwordBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordBoxActionPerformed(evt);
            }
        });

        jButtonLogin.setText("Login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel4.setText("Create a New Account");

        jLabel5.setText("Enter Your Username:");

        setUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setUserActionPerformed(evt);
            }
        });

        jLabel6.setText("Enter Your Email Address:");

        setEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setEmailActionPerformed(evt);
            }
        });

        jLabel7.setText("Enter Your Password:");

        jButtonRegister.setText("Register");
        jButtonRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegisterActionPerformed(evt);
            }
        });

        registerMessage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        loginMessage.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        forgotPassword.setText("Forgot Password");
        forgotPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonLogin)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(usernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(passwordBox, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(52, 52, 52)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(loginMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(forgotPassword))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(registerMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(setUser, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(setEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(setPass, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRegister)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(passwordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLogin)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forgotPassword)
                    .addComponent(loginMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(setUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(setEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(setPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addComponent(registerMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButtonRegister))
                .addGap(41, 41, 41))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameBoxActionPerformed

    private void passwordBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordBoxActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        // TODO add your handling code here:
        login(usernameBox.getText(), passwordBox.getText());
    }//GEN-LAST:event_jButtonLoginActionPerformed

    private void setUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setUserActionPerformed

    private void setEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setEmailActionPerformed

    private void jButtonRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegisterActionPerformed
        // TODO add your handling code here:

        register(setUser.getText(), setEmail.getText(), setPass.getText());
    }//GEN-LAST:event_jButtonRegisterActionPerformed

    private void forgotPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotPasswordActionPerformed
        // TODO add your handling code here:
        forgotPass(usernameBox.getText(), passwordBox.getText());
    }//GEN-LAST:event_forgotPasswordActionPerformed

    File users = new File("Users.txt"); // creates a reference to file where the data will be saved
    File badPass = new File("BadPasswords.txt");

    /**
     * /**
     * The register method processes the user inputed registration credentials
     * and attempts to register and save the credentials. The password is
     * encrypted in MD5 and saved. It will not allow you to register more then
     * once
     * @param user is the user inputed String value that represents a User Name that is used for the registration.     *
     * @param email is the user inputed String value that represents the Email used for the registration.
     * @param password is the user inputed String value that represents the Password used for the registration.
     */
    private void register(String user, String email, String password) { // initiated when user hits register button
        Scanner input = null;
        Scanner line = null;
        boolean invalidPass = false;
        String userInfo = "";
        int atCounter = 0;
        String lineIn = "";
        StringTokenizer theToken = null;
        boolean existing = false;

        try { // opens up the userinfo file to check if the account was already created
            line = new Scanner(users);
        } catch (FileNotFoundException ex) {
        }
        try {
            input = new Scanner(badPass); // opens up the badpasswords file to be read            
        } catch (FileNotFoundException ex) {
        }
        while (input.hasNextLine()) { // does the loop if there are more passwords to compare on the file
            if (input.nextLine().equalsIgnoreCase(password)) {
                invalidPass = true;
            }
            if (password.length() < 4) { // only allows good passwords
                invalidPass = true;
            }
        }
        for (int i = 0; i < email.length(); i++) { // checks to count the number of @ in the email
            if (email.charAt(i) == '@') {
                atCounter++;
            }
        }
        while (line.hasNextLine() && existing == false) {
            lineIn = line.nextLine();
            theToken = new StringTokenizer(lineIn, ";");
            if(theToken.hasMoreTokens()){
            if (theToken.nextToken().equals(user)) {
                existing = true;
            }
            }
        }
        if (user.isEmpty() || email.isEmpty() || password.isEmpty()) { // check if empty
            registerMessage.setText("Please enter your Username, Email and Password.");
        } else if (invalidPass == true) {
            registerMessage.setText("Password too weak, please use a stronger password.");
        } else if (existing == true) {
            registerMessage.setText("This account already exists, please go to the login section.");
        } else if ((email.contains("@") != true) && (email.contains(".ca") || email.contains(".com") || email.contains(".org") || email.contains(".net") || email.contains(".gov")) != true) {
            registerMessage.setText("Please enter a valid email containing an '@'");
        } else if ((email.contains(".ca") || email.contains(".com") || email.contains(".org") || email.contains(".net") || email.contains(".gov")) != true) {
            registerMessage.setText("Please enter a valid email containing a proper domain.");
        } else if (atCounter >= 2) {
            registerMessage.setText("Please enter a proper email.");
        } else { // if everything else is good allows user to create account
            setUser.setText("");
            setEmail.setText("");
            setPass.setText("");
            registerMessage.setText("Account Created!");
            loginMessage.setText("");

            String encPass = null;
            encPass = encrypt(password);
            userInfo = user + ";" + email + ";" + encPass;
            write(userInfo, "");
        }
    }
/**
     * The write method is used to write values and lines to the saved file of
     * users.
     *
     * @param print is the String value of what must be printed into the saved file.
     * @param exception is the String value that represents the exception used when
     * trying to reset a forgotten password to an account.
     */
    private void write(String userInfo, String exception) {
        ArrayList<String> userStuff = new ArrayList<>(); // new array list
        PrintWriter output = null;
        Scanner input = null;

        String line = "";
        try {
            input = new Scanner(users); //reading the object
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (input.hasNextLine()) { //used to reset the password
            line = input.nextLine();
            if (exception.isEmpty() == true) {
                userStuff.add(line);
            } else if (line.contains(exception) == false) {
                userStuff.add(line);
            }
        }

        try {
            output = new PrintWriter(users);// writing the object
            output.println(userInfo);// prints the new user
            for (int i = 0; i < userStuff.size(); i++) {
                output.println(userStuff.get(i)); // copies the previous users back onto the document
            }
            output.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
/**
 * The encrypt method encrypts a inputed String then returns the encrypted String.
 * @param notEnc String value that needs to be encrypted.
 * @return the encrypted String. 
 */
    private String encrypt(String notEnc) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // takes the password as bytes and updates the digest
        md.update(notEnc.getBytes());
        // take the digest and store it as a byte array
        byte byteData[] = md.digest();
        String digest = "";
        // build a new string of the digested password
        for (int i = 0; i < byteData.length; ++i) {
            digest += (Integer.toHexString((byteData[i] & 0xFF) | 0x100).substring(1, 3));
        }
        return digest;
    }
/**
 * The login method processes user entered credentials and attempts to find a saved user with the same credentials, meaning a valid login.
 * @param user is the user inputed String for the User Name
 * @param password is the user inputed String for the Password
 * @return if the login was successful
 */
    private boolean login(String user, String password) {
        Scanner input = null;
        boolean successful = false; // varialble based on if user was successfully logged in
        boolean matchUser = false;
        String lineTokens = "";
        StringTokenizer theToken;
        String encodedPass = "";
        String curToken = null;
        try {
            input = new Scanner(users);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (user.equals("") || password.equals("")) { //All different types of user inputs along with checking if the login  will match and telling the user if it worked or not.
            loginMessage.setText("Please enter a username and password.");
            successful = false;
        } else {
            while (matchUser == false && input.hasNextLine()) {
                lineTokens = input.nextLine();
                theToken = new StringTokenizer(lineTokens, ";");
                while (theToken.hasMoreTokens()) { // checking all of the tokens to find the user
                    curToken = theToken.nextToken();
                    if (curToken.equals(user)) {
                        matchUser = true;
                    }
                }
            }
            if (matchUser == true) {// if the user exists take the info and check on file the password
                theToken = new StringTokenizer(lineTokens, ";");
                while (theToken.hasMoreTokens()) {
                    encodedPass = theToken.nextToken();
                }
                if (encodedPass.equals(encrypt(password))) {

                    loginMessage.setText("Login successful. Welcome!");
                    usernameBox.setText("");
                    passwordBox.setText("");
                    registerMessage.setText("");

                    successful = true;
                } else { // if the username was correct and password wasn't
                    loginMessage.setText("Combination of username and password not found. Please try again.");
                    passwordBox.setText("");
                    successful = false;
                }
            } else { // if the user does not exist
                loginMessage.setText("Username not found in database. Please try again.");
                successful = false;
            }
        }
        return successful;
    }
/**
 * The forgot password method searches for the user, saving everything but that user, rewriting the new credentials and then printing out the saved
 * @param username is the String value that represents the username associated to the forgotten password.
 * @param password  is the String value that represents the new password that should be encrypted and saved to the account.
 */
    private void forgotPass(String username, String password) {
        Scanner input = null;
        boolean matchUser = false;
        String lineTokens = "";
        StringTokenizer theToken = null;
        String encodedPass = "";
        String curToken = null;
        String email = "";
        String lineToWrite = "";

        try {
            input = new Scanner(users); // used to wread from the user file
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (matchUser == false && input.hasNextLine()) { //Finding the user 
            lineTokens = input.nextLine();
            theToken = new StringTokenizer(lineTokens, ";");
            if (theToken.hasMoreTokens()) { // checking all of the tokens
                curToken = theToken.nextToken();
                if (curToken.equals(username)) {
                    matchUser = true;
                }
            }
        }
        if (username.isEmpty() == true) { // reseting the password and then notifying the user if it worked or not.
            loginMessage.setText("Please enter the username of the account you want reset password.");
        } else if (matchUser == false) {
            loginMessage.setText("There is no account under this username.");
        } else if (password.isEmpty() == true && username.isEmpty() == false) {
            loginMessage.setText("Please type in the new password for your account.");
        } else if (password.length() < 4) {
            loginMessage.setText("Please use a stronger password that's at least 4 characters.");
        } else if (username.isEmpty() == false && password.isEmpty() == false && password.length() > 3) {
            loginMessage.setText("Your password was successfully reset.");
            if (theToken.hasMoreTokens()) {
                email = theToken.nextToken();
            }
            encodedPass = encrypt(password); // sends the new password to be encrypted
            lineToWrite = username + ";" + email + ";" + encodedPass; // puts all the info back onto a string
            write(lineToWrite, username); //sent to be writtend on the file
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SecureLoginJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new SecureLoginJFrame().setVisible(true);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(SecureLoginJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton forgotPassword;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JButton jButtonRegister;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel loginMessage;
    private javax.swing.JTextField passwordBox;
    private javax.swing.JLabel registerMessage;
    private javax.swing.JTextField setEmail;
    private javax.swing.JTextField setPass;
    private javax.swing.JTextField setUser;
    private javax.swing.JTextField usernameBox;
    // End of variables declaration//GEN-END:variables
}
